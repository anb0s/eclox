/*
	eclox : Doxygen plugin for Eclipse.
	Copyright (C) 2003-2004 Guillaume Brocker

	This file is part of eclox.

	eclox is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	any later version.

	eclox is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with eclox; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA	
*/

package eclox.resource.content;

import java.util.Collection;

import org.eclipse.ui.views.properties.IPropertySource;

import eclox.resource.content.adapter.TagPropertySource;
import eclox.resource.content.value.Value;

/**
 * Implements a doxygen setting tag.
 * A tag is of the form NAME = VALUE.
 * 
 * @author gbrocker
 */
public class Tag extends Node {
	/**
	 * @see eclox.resource.content.Node#getChildren()
	 */
	public Collection getChildren() {
		return null;
	}
	
	/**
	 * Implement a value listener.
	 */
	private class ValueListener implements eclox.resource.content.value.Listener {
		/**
		 * Process a value change event.
		 * 
		 * @param	event	The event to process.
		 */	
		public void valueChanged( eclox.resource.content.value.Event event ) {
			setDirtyInternal();
		}
	}
	
	/**
	 * The value class provider.
	 */
//	private static eclox.doxyfile.node.value.ClassProvider m_valueClassProvider = new eclox.doxyfile.node.value.ClassProvider();
	
	/**
	 * The maximum '=' character offset over all tag lines.
	 * This is used to reprodure a doxygen configuration file output as close as possible
	 * to the original file (generated by doxygen itself). 
	 */
//	private static int m_equalOffset = 0;
	 
	/**
	 * The tag name.
	 */
	private String name = "";
	
	/**
	 * The tag value listener.
	 */
	private ValueListener valuelistener = new ValueListener();
	
	/**
	 * The tag value.
	 */
	private Value value;
	
	/**
	 * Constructor.
	 * 
	 * @param	text	the text of the tag
	 */
	public Tag(String text) {
		String cleaned = text.replaceAll("[\r\n]", "");
		String[] parts = cleaned.split("\\s*=\\s*");
		
		this.setName(parts[0]);
		this.setValue(new eclox.resource.content.value.String());
		if(parts.length > 1) {
			this.getValue().fromString(parts[1]);
		}
	}

	/**
	 * Make the tag accept the specified visitor.
	 * 
	 * @param	visitor	The visitor to accept.
	 */
	public void accept(Visitor visitor) throws VisitorException {
		visitor.process(this);
	}
	
	/**
	 * Returns an object which is an instance of the given class
	 * associated with this object. Returns <code>null</code> if
	 * no such object can be found.
	 *
	 * @param adapter the adapter class to look up
	 * @return a object castable to the given class, 
	 *    or <code>null</code> if this object does not
	 *    have an adapter for the given class
	 */
	public Object getAdapter(Class adapter) {
		Object	result = null;
		if(adapter.equals(IPropertySource.class) == true ) {
			result = new TagPropertySource(this);
		}
		return result;
	}
	
	/**
	 * Retrieves the tag name.
	 * 
	 * @return	A string containing the tag name.
	 */
	public String getName() {
		return this.name;
	}
	
	/**
	 * Retrieves the tag value.
	 * 
	 * @return	A string containing the tag value.
	 */
	public eclox.resource.content.value.Value getValue() {
		return this.value;
	}
	
	/**
	 * @see eclox.resource.content.Node#setClean()
	 */
	public void setClean() {
		this.setCleanInternal();
	}
	
	/**
	 * Set the tag name.
	 * 
	 * @param name	a new name for the tag
	 */
	public void setName(String name) {
		this.name = name;
		this.setDirtyInternal();
	}

	/**
	 * Set a new value to the tag.
	 * 
	 * @param	value	The new value instance.
	 */
	public void setValue(Value value) {
		// If the new value is different.
		if(this.value == null || this.value.toString().compareTo(value.toString()) != 0) {
			// Remove the listener
			if(this.value != null) {
				this.value.removeListener(this.valuelistener);
			}
			// Set the new value.
			this.value = value;
			this.value.addListener(this.valuelistener);
			// Mark that the value has been changed.
			setDirtyInternal();
		}
	}
	
	/**
	 * Retrieve the value instance for the specified tag name and value text.
	 * 
	 * @param name	A string containing the tag name.
	 * @param value	A string containing the value text.
	 *  
	 * @return	An value instance.
	 */
//	private static eclox.doxyfile.node.value.Value createValueInstance( String name, String value ) {
//		eclox.doxyfile.node.value.Value	result;
//	
//		try {
//			Class	valueClass = m_valueClassProvider.getValueClass( name );
//		
//			result = (eclox.doxyfile.node.value.Value) valueClass.newInstance();
//			result.fromString( value.replaceAll("[\r\n]*", "") );	
//		}
//		catch( java.lang.Exception exception ) {
//			result = null;
//		}
//		return result;
//	}
	
//	/**
//	 * The update the '=' character offset.
//	 * 
//	 * @param	text	The tag text to parse.
//	 */
//	private static void updateEqualOffset( String text ) {
//		int	offset;
//		
//		offset = text.indexOf( '=' );
//		if( offset != -1 && offset > m_equalOffset ) {
//			m_equalOffset = offset; 
//		}
//	}
}
